// <auto-generated />
using System;
using CarRent.CustomerManagement.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarRent.Migrations
{
    [DbContext(typeof(CarRentDBContext))]
    [Migration("20210202140324_CarManagementAdded")]
    partial class CarManagementAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("CarRent.CarManagement.Domain.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CarCLassId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("Pk_CarId");

                    b.HasIndex("CarCLassId");

                    b.ToTable("car");
                });

            modelBuilder.Entity("CarRent.CarManagement.Domain.CarClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClassType")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PricePerDay")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_CarClassId");

                    b.ToTable("carclass");
                });

            modelBuilder.Entity("CarRent.CustomerManagement.Domain.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ZipCodePlaceId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("Pk_CustomerId");

                    b.HasIndex("ZipCodePlaceId");

                    b.ToTable("customer");
                });

            modelBuilder.Entity("CarRent.CustomerManagement.Domain.ZipCodePlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ZipCodePlaceId");

                    b.ToTable("plz");
                });

            modelBuilder.Entity("CarRent.CarManagement.Domain.Car", b =>
                {
                    b.HasOne("CarRent.CarManagement.Domain.CarClass", "CarClass")
                        .WithMany()
                        .HasForeignKey("CarCLassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarClass");
                });

            modelBuilder.Entity("CarRent.CustomerManagement.Domain.Customer", b =>
                {
                    b.HasOne("CarRent.CustomerManagement.Domain.ZipCodePlace", "ZipCodePlace")
                        .WithMany()
                        .HasForeignKey("ZipCodePlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ZipCodePlace");
                });
#pragma warning restore 612, 618
        }
    }
}
